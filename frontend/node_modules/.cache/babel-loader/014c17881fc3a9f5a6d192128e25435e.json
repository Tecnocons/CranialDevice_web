{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\morga\\\\Desktop\\\\CranialDevice_web\\\\CranialDevice_web\\\\frontend\\\\src\\\\pages\\\\patients\\\\StartMeasurement.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport mqtt from 'mqtt';\nimport { Button, Dialog, DialogContent, DialogTitle, MobileStepper, Typography, Box, FormGroup, FormControlLabel, Checkbox } from '@mui/material';\nimport { KeyboardArrowLeft, KeyboardArrowRight } from '@mui/icons-material';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, PointElement, Legend, Title, Tooltip } from 'chart.js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(LineElement, CategoryScale, LinearScale, PointElement, Legend, Title, Tooltip);\nconst instructions = [\"Ensure the helmet is properly positioned.\", \"Verify all connections are secure.\", \"Confirm the patient is ready for the measurement.\"];\nconst StartMeasurement = () => {\n  _s();\n  const brokerUrl = process.env.REACT_APP_MQTT_BROKER_URL;\n  const username = process.env.REACT_APP_MQTT_BROKER_USERNAME;\n  const password = process.env.REACT_APP_MQTT_BROKER_PASSWORD;\n  const [activeStep, setActiveStep] = useState(0);\n  const [open, setOpen] = useState(false);\n  const [data, setData] = useState([]);\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      data: [],\n      label: 'Forza (N)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderWidth: 2,\n      fill: false\n    }, {\n      data: [],\n      label: 'Spostamento (mm)',\n      borderColor: 'rgba(192,75,75,1)',\n      borderWidth: 2,\n      fill: false\n    }, {\n      data: [],\n      label: 'Pressione (bar)',\n      borderColor: 'rgba(75,75,192,1)',\n      borderWidth: 2,\n      fill: false\n    }, {\n      data: [],\n      label: 'Contropressione (bar)',\n      borderColor: 'rgba(75,192,75,1)',\n      borderWidth: 2,\n      fill: false\n    }]\n  });\n  const [measuring, setMeasuring] = useState(false);\n  const [measurementComplete, setMeasurementComplete] = useState(false);\n  const [client, setClient] = useState(null);\n  const [visibleDatasets, setVisibleDatasets] = useState({\n    forza: true,\n    spostamento: true,\n    pressione: true,\n    contropressione: true\n  });\n  useEffect(() => {\n    if (measuring) {\n      const options = {\n        username,\n        password,\n        reconnectPeriod: 1000\n      };\n      const mqttClient = mqtt.connect(brokerUrl, options);\n      setClient(mqttClient);\n      mqttClient.on('connect', () => {\n        console.log('Connected to MQTT broker');\n        mqttClient.subscribe('caschetto/data');\n        mqttClient.publish('caschetto/start', 'start'); // Publish start command\n      });\n      mqttClient.on('message', (topic, message) => {\n        const messageStr = message.toString();\n        try {\n          const parsedData = parseMessage(messageStr);\n          setData(prevData => [...prevData, parsedData]);\n          setChartData(prevChartData => ({\n            labels: [...prevChartData.labels, new Date().toLocaleTimeString()],\n            datasets: [{\n              ...prevChartData.datasets[0],\n              data: [...prevChartData.datasets[0].data, parsedData.forza_N]\n            }, {\n              ...prevChartData.datasets[1],\n              data: [...prevChartData.datasets[1].data, parsedData.spostamento_mm]\n            }, {\n              ...prevChartData.datasets[2],\n              data: [...prevChartData.datasets[2].data, parsedData.pressione_bar]\n            }, {\n              ...prevChartData.datasets[3],\n              data: [...prevChartData.datasets[3].data, parsedData.contropressione_bar]\n            }]\n          }));\n        } catch (error) {\n          console.error('Error parsing MQTT message:', error);\n        }\n      });\n      mqttClient.on('error', err => {\n        console.error('Connection error:', err);\n      });\n      mqttClient.on('close', () => {\n        console.log('Connection to MQTT broker closed');\n      });\n      mqttClient.on('offline', () => {\n        console.log('MQTT client offline');\n      });\n      mqttClient.on('reconnect', () => {\n        console.log('Reconnecting to MQTT broker...');\n      });\n      return () => mqttClient.end();\n    }\n  }, [measuring]);\n  const parseMessage = messageStr => {\n    const data = messageStr.split(', ').reduce((acc, curr) => {\n      const [key, value] = curr.split('=');\n      acc[key.trim()] = parseFloat(value);\n      return acc;\n    }, {});\n    return {\n      spostamento_mm: data[\"Spostamento(mm)\"],\n      forza_N: data[\"Forza(N)\"],\n      pressione_bar: data[\"Pressione(bar)\"],\n      contropressione_bar: data[\"Contropressione(bar)\"]\n    };\n  };\n  const handleNext = () => {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  };\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n  const handleStartMeasurement = () => {\n    setMeasuring(true);\n  };\n  const handleMeasurementComplete = () => {\n    setMeasuring(false);\n    setMeasurementComplete(true);\n  };\n  const startMeasurementProcess = () => {\n    setOpen(true);\n    setActiveStep(0);\n    setMeasurementComplete(false);\n    setData([]);\n    setChartData({\n      labels: [],\n      datasets: [{\n        data: [],\n        label: 'Forza (N)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderWidth: 2,\n        fill: false\n      }, {\n        data: [],\n        label: 'Spostamento (mm)',\n        borderColor: 'rgba(192,75,75,1)',\n        borderWidth: 2,\n        fill: false\n      }, {\n        data: [],\n        label: 'Pressione (bar)',\n        borderColor: 'rgba(75,75,192,1)',\n        borderWidth: 2,\n        fill: false\n      }, {\n        data: [],\n        label: 'Contropressione (bar)',\n        borderColor: 'rgba(75,192,75,1)',\n        borderWidth: 2,\n        fill: false\n      }]\n    });\n  };\n  const toggleDatasetVisibility = datasetIndex => {\n    setVisibleDatasets(prevState => {\n      const newState = {\n        ...prevState\n      };\n      const key = Object.keys(visibleDatasets)[datasetIndex];\n      newState[key] = !prevState[key];\n      return newState;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: startMeasurementProcess,\n      children: \"INIZIA MISURAZIONE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: () => setOpen(false),\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Istruzioni per la Misurazione\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [!measuring && !measurementComplete && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: instructions[activeStep]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MobileStepper, {\n            steps: instructions.length,\n            position: \"static\",\n            variant: \"text\",\n            activeStep: activeStep,\n            nextButton: /*#__PURE__*/_jsxDEV(Button, {\n              size: \"small\",\n              onClick: handleNext,\n              disabled: activeStep === instructions.length - 1,\n              children: [\"Next\", /*#__PURE__*/_jsxDEV(KeyboardArrowRight, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 19\n            }, this),\n            backButton: /*#__PURE__*/_jsxDEV(Button, {\n              size: \"small\",\n              onClick: handleBack,\n              disabled: activeStep === 0,\n              children: [/*#__PURE__*/_jsxDEV(KeyboardArrowLeft, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 21\n              }, this), \"Back\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }, this), activeStep === instructions.length - 1 && /*#__PURE__*/_jsxDEV(Box, {\n            textAlign: \"center\",\n            p: 2,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: handleStartMeasurement,\n              children: \"Start Measurement\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), measuring && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Real-Time Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 15\n          }, this), data.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"Spostamento (mm): \", data[data.length - 1].spostamento_mm]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"Forza (N): \", data[data.length - 1].forza_N]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"Pressione (bar): \", data[data.length - 1].pressione_bar]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"Contropressione (bar): \", data[data.length - 1].contropressione_bar]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(Line, {\n            data: chartData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            textAlign: \"center\",\n            p: 2,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: handleMeasurementComplete,\n              children: \"Stop Measurement\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this), measurementComplete && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Measurement Complete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            row: true,\n            children: Object.keys(visibleDatasets).map((key, index) => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                checked: visibleDatasets[key],\n                onChange: () => toggleDatasetVisibility(index),\n                name: key\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 23\n              }, this),\n              label: key.charAt(0).toUpperCase() + key.slice(1)\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: {\n              ...chartData,\n              datasets: chartData.datasets.map((dataset, index) => ({\n                ...dataset,\n                hidden: !visibleDatasets[Object.keys(visibleDatasets)[index]]\n              }))\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            textAlign: \"center\",\n            p: 2,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: () => setOpen(false),\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(StartMeasurement, \"7vd+9VVyQ3tkJqwW7tSzzhlm0CU=\");\n_c = StartMeasurement;\nexport default StartMeasurement;\nvar _c;\n$RefreshReg$(_c, \"StartMeasurement\");","map":{"version":3,"names":["React","useState","useEffect","mqtt","Button","Dialog","DialogContent","DialogTitle","MobileStepper","Typography","Box","FormGroup","FormControlLabel","Checkbox","KeyboardArrowLeft","KeyboardArrowRight","Line","Chart","ChartJS","LineElement","CategoryScale","LinearScale","PointElement","Legend","Title","Tooltip","jsxDEV","_jsxDEV","Fragment","_Fragment","register","instructions","StartMeasurement","_s","brokerUrl","process","env","REACT_APP_MQTT_BROKER_URL","username","REACT_APP_MQTT_BROKER_USERNAME","password","REACT_APP_MQTT_BROKER_PASSWORD","activeStep","setActiveStep","open","setOpen","data","setData","chartData","setChartData","labels","datasets","label","borderColor","borderWidth","fill","measuring","setMeasuring","measurementComplete","setMeasurementComplete","client","setClient","visibleDatasets","setVisibleDatasets","forza","spostamento","pressione","contropressione","options","reconnectPeriod","mqttClient","connect","on","console","log","subscribe","publish","topic","message","messageStr","toString","parsedData","parseMessage","prevData","prevChartData","Date","toLocaleTimeString","forza_N","spostamento_mm","pressione_bar","contropressione_bar","error","err","end","split","reduce","acc","curr","key","value","trim","parseFloat","handleNext","prevActiveStep","handleBack","handleStartMeasurement","handleMeasurementComplete","startMeasurementProcess","toggleDatasetVisibility","datasetIndex","prevState","newState","Object","keys","children","variant","color","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onClose","fullWidth","steps","length","position","nextButton","size","disabled","backButton","textAlign","p","row","map","index","control","checked","onChange","name","charAt","toUpperCase","slice","dataset","hidden","_c","$RefreshReg$"],"sources":["C:/Users/morga/Desktop/CranialDevice_web/CranialDevice_web/frontend/src/pages/patients/StartMeasurement.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport mqtt from 'mqtt';\nimport { Button, Dialog, DialogContent, DialogTitle, MobileStepper, Typography, Box, FormGroup, FormControlLabel, Checkbox } from '@mui/material';\nimport { KeyboardArrowLeft, KeyboardArrowRight } from '@mui/icons-material';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, PointElement, Legend, Title, Tooltip } from 'chart.js';\n\nChartJS.register(LineElement, CategoryScale, LinearScale, PointElement, Legend, Title, Tooltip);\n\nconst instructions = [\n  \"Ensure the helmet is properly positioned.\",\n  \"Verify all connections are secure.\",\n  \"Confirm the patient is ready for the measurement.\"\n];\n\nconst StartMeasurement = () => {\n  const brokerUrl = process.env.REACT_APP_MQTT_BROKER_URL;\n  const username = process.env.REACT_APP_MQTT_BROKER_USERNAME;\n  const password = process.env.REACT_APP_MQTT_BROKER_PASSWORD;\n\n  const [activeStep, setActiveStep] = useState(0);\n  const [open, setOpen] = useState(false);\n  const [data, setData] = useState([]);\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [\n      { data: [], label: 'Forza (N)', borderColor: 'rgba(75,192,192,1)', borderWidth: 2, fill: false },\n      { data: [], label: 'Spostamento (mm)', borderColor: 'rgba(192,75,75,1)', borderWidth: 2, fill: false },\n      { data: [], label: 'Pressione (bar)', borderColor: 'rgba(75,75,192,1)', borderWidth: 2, fill: false },\n      { data: [], label: 'Contropressione (bar)', borderColor: 'rgba(75,192,75,1)', borderWidth: 2, fill: false },\n    ]\n  });\n  const [measuring, setMeasuring] = useState(false);\n  const [measurementComplete, setMeasurementComplete] = useState(false);\n  const [client, setClient] = useState(null);\n  const [visibleDatasets, setVisibleDatasets] = useState({\n    forza: true,\n    spostamento: true,\n    pressione: true,\n    contropressione: true,\n  });\n\n  useEffect(() => {\n    if (measuring) {\n      const options = { username, password, reconnectPeriod: 1000 };\n      const mqttClient = mqtt.connect(brokerUrl, options);\n      setClient(mqttClient);\n\n      mqttClient.on('connect', () => {\n        console.log('Connected to MQTT broker');\n        mqttClient.subscribe('caschetto/data');\n        mqttClient.publish('caschetto/start', 'start'); // Publish start command\n      });\n\n      mqttClient.on('message', (topic, message) => {\n        const messageStr = message.toString();\n        try {\n          const parsedData = parseMessage(messageStr);\n          setData(prevData => [...prevData, parsedData]);\n          setChartData(prevChartData => ({\n            labels: [...prevChartData.labels, new Date().toLocaleTimeString()],\n            datasets: [\n              { ...prevChartData.datasets[0], data: [...prevChartData.datasets[0].data, parsedData.forza_N] },\n              { ...prevChartData.datasets[1], data: [...prevChartData.datasets[1].data, parsedData.spostamento_mm] },\n              { ...prevChartData.datasets[2], data: [...prevChartData.datasets[2].data, parsedData.pressione_bar] },\n              { ...prevChartData.datasets[3], data: [...prevChartData.datasets[3].data, parsedData.contropressione_bar] },\n            ]\n          }));\n        } catch (error) {\n          console.error('Error parsing MQTT message:', error);\n        }\n      });\n\n      mqttClient.on('error', (err) => {\n        console.error('Connection error:', err);\n      });\n\n      mqttClient.on('close', () => {\n        console.log('Connection to MQTT broker closed');\n      });\n\n      mqttClient.on('offline', () => {\n        console.log('MQTT client offline');\n      });\n\n      mqttClient.on('reconnect', () => {\n        console.log('Reconnecting to MQTT broker...');\n      });\n\n      return () => mqttClient.end();\n    }\n  }, [measuring]);\n\n  const parseMessage = (messageStr) => {\n    const data = messageStr.split(', ').reduce((acc, curr) => {\n      const [key, value] = curr.split('=');\n      acc[key.trim()] = parseFloat(value);\n      return acc;\n    }, {});\n\n    return {\n      spostamento_mm: data[\"Spostamento(mm)\"],\n      forza_N: data[\"Forza(N)\"],\n      pressione_bar: data[\"Pressione(bar)\"],\n      contropressione_bar: data[\"Contropressione(bar)\"]\n    };\n  };\n\n  const handleNext = () => {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleStartMeasurement = () => {\n    setMeasuring(true);\n  };\n\n  const handleMeasurementComplete = () => {\n    setMeasuring(false);\n    setMeasurementComplete(true);\n  };\n\n  const startMeasurementProcess = () => {\n    setOpen(true);\n    setActiveStep(0);\n    setMeasurementComplete(false);\n    setData([]);\n    setChartData({\n      labels: [],\n      datasets: [\n        { data: [], label: 'Forza (N)', borderColor: 'rgba(75,192,192,1)', borderWidth: 2, fill: false },\n        { data: [], label: 'Spostamento (mm)', borderColor: 'rgba(192,75,75,1)', borderWidth: 2, fill: false },\n        { data: [], label: 'Pressione (bar)', borderColor: 'rgba(75,75,192,1)', borderWidth: 2, fill: false },\n        { data: [], label: 'Contropressione (bar)', borderColor: 'rgba(75,192,75,1)', borderWidth: 2, fill: false },\n      ]\n    });\n  };\n\n  const toggleDatasetVisibility = (datasetIndex) => {\n    setVisibleDatasets(prevState => {\n      const newState = { ...prevState };\n      const key = Object.keys(visibleDatasets)[datasetIndex];\n      newState[key] = !prevState[key];\n      return newState;\n    });\n  };\n\n  return (\n    <div>\n      <Button variant=\"contained\" color=\"primary\" onClick={startMeasurementProcess}>\n        INIZIA MISURAZIONE\n      </Button>\n      <Dialog open={open} onClose={() => setOpen(false)} fullWidth>\n        <DialogTitle>Istruzioni per la Misurazione</DialogTitle>\n        <DialogContent>\n          {!measuring && !measurementComplete && (\n            <>\n              <Typography>{instructions[activeStep]}</Typography>\n              <MobileStepper\n                steps={instructions.length}\n                position=\"static\"\n                variant=\"text\"\n                activeStep={activeStep}\n                nextButton={\n                  <Button size=\"small\" onClick={handleNext} disabled={activeStep === instructions.length - 1}>\n                    Next\n                    <KeyboardArrowRight />\n                  </Button>\n                }\n                backButton={\n                  <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\n                    <KeyboardArrowLeft />\n                    Back\n                  </Button>\n                }\n              />\n              {activeStep === instructions.length - 1 && (\n                <Box textAlign=\"center\" p={2}>\n                  <Button variant=\"contained\" color=\"primary\" onClick={handleStartMeasurement}>\n                    Start Measurement\n                  </Button>\n                </Box>\n              )}\n            </>\n          )}\n          {measuring && (\n            <div>\n              <Typography variant=\"h6\">Real-Time Data</Typography>\n              {data.length > 0 && (\n                <>\n                  <Typography>Spostamento (mm): {data[data.length - 1].spostamento_mm}</Typography>\n                  <Typography>Forza (N): {data[data.length - 1].forza_N}</Typography>\n                  <Typography>Pressione (bar): {data[data.length - 1].pressione_bar}</Typography>\n                  <Typography>Contropressione (bar): {data[data.length - 1].contropressione_bar}</Typography>\n                </>\n              )}\n              <Line data={chartData} />\n              <Box textAlign=\"center\" p={2}>\n                <Button variant=\"contained\" color=\"primary\" onClick={handleMeasurementComplete}>\n                  Stop Measurement\n                </Button>\n              </Box>\n            </div>\n          )}\n          {measurementComplete && (\n            <div>\n              <Typography variant=\"h6\">Measurement Complete</Typography>\n              <FormGroup row>\n                {Object.keys(visibleDatasets).map((key, index) => (\n                  <FormControlLabel\n                    key={key}\n                    control={\n                      <Checkbox\n                        checked={visibleDatasets[key]}\n                        onChange={() => toggleDatasetVisibility(index)}\n                        name={key}\n                      />\n                    }\n                    label={key.charAt(0).toUpperCase() + key.slice(1)}\n                    />\n                  ))}\n                </FormGroup>\n                <Line\n                  data={{\n                    ...chartData,\n                    datasets: chartData.datasets.map((dataset, index) => ({\n                      ...dataset,\n                      hidden: !visibleDatasets[Object.keys(visibleDatasets)[index]],\n                    })),\n                  }}\n                />\n                <Box textAlign=\"center\" p={2}>\n                  <Button variant=\"contained\" color=\"primary\" onClick={() => setOpen(false)}>\n                    Close\n                  </Button>\n                </Box>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    );\n  };\n  \n  export default StartMeasurement;\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}